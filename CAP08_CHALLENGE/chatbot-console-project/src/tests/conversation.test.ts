import { Conversation, Message } from "../models/conversation";

describe("Conversation", () => {
  let conversation: Conversation;

  beforeEach(() => {
    conversation = new Conversation();
  });

  it("should start with an empty message list", () => {
    expect(conversation.getMessages()).toHaveLength(0);
  });

  it("should add a user message correctly", () => {
    conversation.addMessage("user", "Hello, chatbot!");
    const messages = conversation.getMessages();
    expect(messages).toHaveLength(1);
    expect(messages[0]).toEqual({
      role: "user",
      content: "Hello, chatbot!",
    });
  });

  it("should add an assistant message correctly", () => {
    conversation.addMessage("assistant", "Hello, human!");
    const messages = conversation.getMessages();
    expect(messages).toHaveLength(1);
    expect(messages[0]).toEqual({
      role: "assistant",
      content: "Hello, human!",
    });
  });

  it("should maintain the order of messages", () => {
    conversation.addMessage("user", "First message");
    conversation.addMessage("assistant", "Second message");
    conversation.addMessage("user", "Third message");

    const messages = conversation.getMessages();
    expect(messages).toHaveLength(3);
    expect(messages[0].content).toBe("First message");
    expect(messages[1].content).toBe("Second message");
    expect(messages[2].content).toBe("Third message");
  });

  it("should clear all messages", () => {
    conversation.addMessage("user", "Test message");
    expect(conversation.getMessages()).toHaveLength(1);

    conversation.clear();
    expect(conversation.getMessages()).toHaveLength(0);
  });
  // returns all messages added to the conversation
  it("should return all messages when messages are added", () => {
    const conversation = new Conversation();
    conversation.addMessage("user", "Hello");
    conversation.addMessage("assistant", "Hi there!");

    const messages = conversation.getMessages();

    expect(messages).toEqual([
      { role: "user", content: "Hello" },
      { role: "assistant", content: "Hi there!" },
    ]);
  });
  // handles retrieval when messages array is empty
  it("should return an empty array when no messages are added", () => {
    const conversation = new Conversation();

    const messages = conversation.getMessages();

    expect(messages).toEqual([]);
  });
  // returns empty array after clear method is called
  it("should return empty array after clear method is called", () => {
    const conversation = new Conversation();
    conversation.addMessage("user", "Hello");
    conversation.addMessage("assistant", "Hi there!");

    conversation.clear();

    const messages = conversation.getMessages();

    expect(messages).toEqual([]);
  });
  
});

// Generated by CodiumAI

describe('Conversation', () => {

  // Adding a message with role 'user' and retrieving it
  it('should add a message with role "user" and retrieve it', () => {
    const conversation = new Conversation();
    conversation.addMessage('user', 'Hello');
    const messages = conversation.getMessages();
    expect(messages).toHaveLength(1);
    expect(messages[0]).toEqual({ role: 'user', content: 'Hello' });
  });

  // Adding a message with an empty content string
  it('should add a message with an empty content string', () => {
    const conversation = new Conversation();
    conversation.addMessage('user', '');
    const messages = conversation.getMessages();
    expect(messages).toHaveLength(1);
    expect(messages[0]).toEqual({ role: 'user', content: '' });
  });
});
